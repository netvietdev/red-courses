#!/usr/bin/env node
var git = require('git-node');
var program = require('commander');
var fs = require('fs');
var basename = require('path').basename;
var existsSync = require('fs').existsSync;
var pathJoin = require('path').join;

program
  .usage('[options] [--] <url> [<dir>]')
  .option('--ref <branch/tag/ref>', 'checkout to specefic branch, tag, or ref')
  .option('--depth <num>', 'do a shallow clone with num commits deep')
  .option('-q', 'Be quiet; don\t show progress')
  .parse(process.argv);

if (program.args.length < 1 || program.args.length > 2) {
  program.outputHelp();
  process.exit(1);
}

var url = program.args[0];
var remote = git.remote(url);
var target = program.args[1] || basename(remote.pathname, ".git");
var repo = git.repo(target + "/.git");
var ref = program.ref || "HEAD";
var opts = {};
if (!program.Q) opts.onProgress = onProgress;
if (ref) opts.want = program.ref;
if (program.depth) opts.depth = parseInt(program.depth, 10);
if (!program.Q) {
  if (existsSync(target)) {
    console.error("Fetching updates from %s to %s", url, target);
  }
  else {
    console.log("Cloning %s to %s..", url, target);
  }
}
repo.fetch(remote, opts, onDone);

function onProgress(progress) {
  process.stderr.write(progress);
}

function onDone() {
  if (ref) {
    repo.resolveHashish(ref, function (err, hash) {
      if (err) throw err;
      repo.updateHead(hash, function (err) {
        if (err) throw err;
        // copied from export.js
        var read;
        repo.treeWalk("HEAD", function (err, stream) {
          console.log('walking...');
          if (err) throw err;
          read = stream.read;
          return read(function() {
            read(onEntry);
          });
        });

        function onEntry(err, entry) {
          console.log('on entry...');
          if (err) throw err;
          if (!entry) return;
          var path = pathJoin('.', entry.path);
          if (!program.Q) {
            var colorPath = "\x1B[34m" + path.replace(/\//g, "\x1B[1;34m/\x1B[0;34m") + "\x1B[0m";
            console.log("%s %s", entry.hash, colorPath);
          }
          if (entry.type === "tree") {
            return fs.mkdir(path, onDone);
          }
          if (entry.type === "blob") {
            return fs.writeFile(path, entry.body, onDone);
          }
          return read(onEntry);
        }

        function onDone(err) {
          if (err) throw err;
          return read(onEntry);
        }
      });
    });
  }
  if (!program.Q) console.log("Done.");
}
